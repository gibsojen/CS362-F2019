        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "kingdom_cards.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
       20:    9:void cardNumToName(int card, char *name) {
       20:   10:    switch(card) {
        -:   11:    case curse:
    #####:   12:        strcpy(name,"Curse");
    #####:   13:        break;
        -:   14:    case estate:
        8:   15:        strcpy(name,"Estate");
        8:   16:        break;
        -:   17:    case duchy:
    #####:   18:        strcpy(name,"Duchy");
    #####:   19:        break;
        -:   20:    case province:
    #####:   21:        strcpy(name,"Province");
    #####:   22:        break;
        -:   23:    case copper:
       12:   24:        strcpy(name,"Copper");
       12:   25:        break;
        -:   26:    case silver:
    #####:   27:        strcpy(name,"Silver");
    #####:   28:        break;
        -:   29:    case gold:
    #####:   30:        strcpy(name,"Gold");
    #####:   31:        break;
        -:   32:    case adventurer:
    #####:   33:        strcpy(name,"Adventurer");
    #####:   34:        break;
        -:   35:    case council_room:
    #####:   36:        strcpy(name,"Council Room");
    #####:   37:        break;
        -:   38:    case feast:
    #####:   39:        strcpy(name,"Feast");
    #####:   40:        break;
        -:   41:    case gardens:
    #####:   42:        strcpy(name,"Gardens");
    #####:   43:        break;
        -:   44:    case mine:
    #####:   45:        strcpy(name,"Mine");
    #####:   46:        break;
        -:   47:    case remodel:
    #####:   48:        strcpy(name,"Remodel");
    #####:   49:        break;
        -:   50:    case smithy:
    #####:   51:        strcpy(name,"Smithy");
    #####:   52:        break;
        -:   53:    case village:
    #####:   54:        strcpy(name,"Village");
    #####:   55:        break;
        -:   56:    case baron:
    #####:   57:        strcpy(name,"Baron");
    #####:   58:        break;
        -:   59:    case great_hall:
    #####:   60:        strcpy(name,"Great Hall");
    #####:   61:        break;
        -:   62:    case minion:
    #####:   63:        strcpy(name,"Minion");
    #####:   64:        break;
        -:   65:    case steward:
    #####:   66:        strcpy(name,"Steward");
    #####:   67:        break;
        -:   68:    case tribute:
    #####:   69:        strcpy(name,"Tribute");
    #####:   70:        break;
        -:   71:    case ambassador:
    #####:   72:        strcpy(name,"Ambassador");
    #####:   73:        break;
        -:   74:    case cutpurse:
    #####:   75:        strcpy(name,"Cutpurse");
    #####:   76:        break;
        -:   77:    case embargo:
    #####:   78:        strcpy(name,"Embargo");
    #####:   79:        break;
        -:   80:    case outpost:
    #####:   81:        strcpy(name,"Outpost");
    #####:   82:        break;
        -:   83:    case salvager:
    #####:   84:        strcpy(name,"Salvager");
    #####:   85:        break;
        -:   86:    case sea_hag:
    #####:   87:        strcpy(name,"Sea Hag");
    #####:   88:        break;
        -:   89:    case treasure_map:
    #####:   90:        strcpy(name,"Treasure Map");
    #####:   91:        break;
        -:   92:
        -:   93:    default:
    #####:   94:        strcpy(name,"?");
        -:   95:    }
        -:   96:
       20:   97:}
        -:   98:
        -:   99:
        -:  100:
        -:  101:
        1:  102:int main() {
        -:  103:
        -:  104:   // set players and seed
        1:  105:   int numOfPlayers = 2;
        1:  106:   int seed = 232;
        -:  107:
        -:  108:   // declare game state
        -:  109:   struct gameState G, testGame;
        -:  110:
        -:  111:   // set card array
        1:  112:   int k[10] = {adventurer, baron, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        -:  113:
        -:  114:   // initialize game
        1:  115:   initializeGame(numOfPlayers, k, seed, &G);
        -:  116:
        1:  117:   int handPos = 0;
        1:  118:   int bonus = 0;
        1:  119:   int currPlayer = 0;
        1:  120:   int choice1 = 0;
        1:  121:   int choice2 = -1;
        1:  122:   int choice3 = -1;
        -:  123:
        -:  124:
        -:  125:
        -:  126:
        -:  127:   // begin testing
        1:  128:   printf("\n\n** BEGIN TEST No. 1 *************************************************************\n");
        1:  129:   printf("** choice1 = 0, gain an estate, +1 buy\n");
        1:  130:   printf("** supply decreases by 1 and discards increase by 1 (for new estate), buys increases by 1 \n\n\n");
        -:  131:
        -:  132:   // copy game state for test game
        1:  133:   memcpy(&testGame, &G, sizeof(struct gameState));
        -:  134:
        -:  135: 
        -:  136:   // Players Hand
        1:  137:   printf("Players Hand Before Play:\n");
        1:  138:    int handCount = testGame.handCount[currPlayer];
        -:  139:    int handIndex;
        1:  140:    printf("Player %d's hand:\n", currPlayer);
        1:  141:    if(handCount > 0) printf("#  Card\n");
        6:  142:    for(handIndex = 0; handIndex < handCount; handIndex++) {
        5:  143:        int card = testGame.hand[currPlayer][handIndex];
        -:  144:        char name[32];
        5:  145:        cardNumToName(card, name);
        5:  146:        printf("%-2d %-13s\n", handIndex, name);
        -:  147:    }
        1:  148:    printf("\n");
        -:  149:
        -:  150:
        1:  151:   choice1 = -1;
        1:  152:   cardEffect(baron, choice1, choice2, choice3, &testGame, handPos, &bonus);
        -:  153:
        -:  154:
        1:  155:   if (testGame.supplyCount[estate] == G.supplyCount[estate] - 1) {
    #####:  156:      printf("OK:  the number of Estates in the supply is one less than before playing baron.\n");
    #####:  157:      printf("Number of estates in supply before play = %d\n", G.supplyCount[estate]);
    #####:  158:      printf("Number of estates in supply after play = %d,  ", testGame.supplyCount[estate]);
    #####:  159:      printf("Number of estates in supply expected = %d\n\n", G.supplyCount[estate] -1);
        -:  160:   }
        -:  161:
        -:  162:   else {
        1:  163:      printf("ERROR:  the number of Estates in the supply is not one less than before playing baron.\n");
        1:  164:      printf("Number of estates in supply before play = %d\n", G.supplyCount[estate]);
        1:  165:      printf("Number of estates in supply after play = %d,  ", testGame.supplyCount[estate]);
        1:  166:      printf("Number of estates in supply expected = %d\n\n", G.supplyCount[estate] -1);
        -:  167:
        -:  168:   }
        -:  169:
        1:  170:   if (testGame.discardCount[currPlayer] == G.discardCount[currPlayer] + 1) {
        1:  171:      printf("OK:  the number of discards has increased by 1 for gaining an estate.\n");
        1:  172:      printf("Number of discards before play = %d\n", G.discardCount[currPlayer]);
        1:  173:      printf("Number of discards after play = %d,  ", testGame.discardCount[currPlayer]);
        1:  174:      printf("Number of discards expected = 1\n\n");
        -:  175:   }
        -:  176:   else {
    #####:  177:      printf("ERROR:  the number of discards did not increase by 1 for gaining an estate.\n");
    #####:  178:      printf("Number of discards before play = %d\n", G.discardCount[currPlayer]);
    #####:  179:      printf("Number of discards after play = %d,  ", testGame.discardCount[currPlayer]);
    #####:  180:      printf("Number of discards expected = 1\n\n");
        -:  181:   }
        -:  182: 
        1:  183:   if (G.numBuys + 1 == testGame.numBuys) {
        1:  184:      printf("OK:  the number of buys has increased by 1.\n");
        1:  185:      printf("Number of buys before play = %d\n", G.numBuys);
        1:  186:      printf("Number of buys after play = %d,  ", testGame.numBuys);
        1:  187:      printf("Number of buys expected = %d\n\n", G.numBuys + 1);
        -:  188:   }
        -:  189:   else {
    #####:  190:      printf("ERROR:  the number of buys did not increase by 1.\n");
    #####:  191:      printf("Number of buys before play = %d\n", G.numBuys);
    #####:  192:      printf("Number of buys after play = %d,  ", testGame.numBuys);
    #####:  193:      printf("Number of buys expected = %d\n\n", G.numBuys + 1);
        -:  194:   }
        -:  195:
        -:  196:
        -:  197:   // Players Hand
        1:  198:   printf("Players Hand After Play:\n");
        1:  199:   handCount = testGame.handCount[currPlayer];
        1:  200:   printf("Player %d's hand:\n", currPlayer);
        1:  201:   if(handCount > 0) printf("#  Card\n");
        6:  202:   for(handIndex = 0; handIndex < handCount; handIndex++) {
        5:  203:      int card = testGame.hand[currPlayer][handIndex];
        -:  204:      char name[32];
        5:  205:      cardNumToName(card, name);
        5:  206:      printf("%-2d %-13s\n", handIndex, name);
        -:  207:   }
        1:  208:   printf("\n\n");
        -:  209:
        -:  210:
        1:  211:   printf("** END TEST No. 1 *************************************************************\n\n\n\n");
        -:  212:
        -:  213:
        -:  214:
        1:  215:   printf("\n\n** BEGIN TEST No. 2 *************************************************************\n");
        1:  216:   printf("** choice1 = 1, +1 buy, discard estate and gain +4 coins\n");
        1:  217:   printf("** discards increase by 1, buys increase by 1, coins increase by 4 \n\n\n");
        -:  218:
        -:  219:   // copy game state for test game
        1:  220:   memcpy(&testGame, &G, sizeof(struct gameState));
        -:  221:
        -:  222:
        -:  223:   // Players Hand
        1:  224:   printf("Players Hand Before Play:\n");
        1:  225:   handCount = testGame.handCount[currPlayer];
        1:  226:   printf("Player %d's hand:\n", currPlayer);
        1:  227:   if(handCount > 0) printf("#  Card\n");
        6:  228:   for(handIndex = 0; handIndex < handCount; handIndex++) {
        5:  229:      int card = testGame.hand[currPlayer][handIndex];
        -:  230:      char name[32];
        5:  231:      cardNumToName(card, name);
        5:  232:      printf("%-2d %-13s\n", handIndex, name);
        -:  233:   }
        1:  234:   printf("\n");
        -:  235:
        -:  236:
        -:  237:
        1:  238:   choice1 = 1;
        1:  239:   cardEffect(baron, choice1, choice2, choice3, &testGame, handPos, &bonus);
        -:  240:   
        1:  241:   if (G.numBuys + 1 == testGame.numBuys) {
        1:  242:      printf("OK:  the number of buys has increased by 1.\n");
        1:  243:      printf("Number of buys before play = %d\n", G.numBuys);
        1:  244:      printf("Number of buys after play = %d,  ", testGame.numBuys);
        1:  245:      printf("Number of buys expected = %d\n\n", G.numBuys + 1);
        -:  246:   }
        -:  247:   else {
    #####:  248:      printf("ERROR:  the number of buys did not increase by 1.\n");
    #####:  249:      printf("Number of buys before play = %d\n", G.numBuys);
    #####:  250:      printf("Number of buys after play = %d,  ", testGame.numBuys);
    #####:  251:      printf("Number of buys expected = %d\n\n", G.numBuys + 1);
        -:  252:   }
        -:  253:
        -:  254:
        1:  255:   if (testGame.discardCount[currPlayer] == G.discardCount[currPlayer] + 1) {
    #####:  256:      printf("OK:  the number of discards has increased by 1 for discarding an estate.\n");
    #####:  257:      printf("Number of discards before play = %d\n", G.discardCount[currPlayer]);
    #####:  258:      printf("Number of discards after play = %d,  ", testGame.discardCount[currPlayer]);
    #####:  259:      printf("Number of discards expected = 1\n\n");
        -:  260:   }
        -:  261:   else {
        1:  262:      printf("ERROR:  the number of discards did not increase by 1 for discarding an estate.\n");
        1:  263:      printf("Number of discards before play = %d\n", G.discardCount[currPlayer]);
        1:  264:      printf("Number of discards after play = %d,  ", testGame.discardCount[currPlayer]);
        1:  265:      printf("Number of discards expected = 1\n\n");
        -:  266:   }
        -:  267:
        -:  268:
        1:  269:   if (G.coins + 4 == testGame.coins) {
        1:  270:      printf("OK:  the number of coins has increased by 4.\n");
        1:  271:      printf("Number of coins before play = %d\n", G.coins);
        1:  272:      printf("Number of coins after play = %d,  ", testGame.coins);
        1:  273:      printf("Number of coins expected = %d\n\n", G.coins + 4);
        -:  274:   }
        -:  275:   else {
    #####:  276:      printf("ERROR:  the number of coins did not increase by 4.\n");
    #####:  277:      printf("Number of coins before play = %d\n", G.coins);
    #####:  278:      printf("Number of coins after play = %d,  ", testGame.coins);
    #####:  279:      printf("Number of coins expected = %d\n\n", G.coins + 4);
        -:  280:   }
        -:  281:
        -:  282:
        -:  283:   // Players Hand
        1:  284:   printf("Players Hand After Play:\n");
        1:  285:   handCount = testGame.handCount[currPlayer];
        1:  286:   printf("Player %d's hand:\n", currPlayer);
        1:  287:   if(handCount > 0) printf("#  Card\n");
        5:  288:   for(handIndex = 0; handIndex < handCount; handIndex++) {
        4:  289:      int card = testGame.hand[currPlayer][handIndex];
        -:  290:      char name[32];
        4:  291:      cardNumToName(card, name);
        4:  292:      printf("%-2d %-13s\n", handIndex, name);
        -:  293:   }
        1:  294:   printf("\n\n");
        -:  295:
        -:  296:
        -:  297:
        1:  298:   printf("** END TEST No. 2 *************************************************************\n\n\n\n");
        -:  299:
        -:  300:
        -:  301:
        -:  302:
        -:  303:
        -:  304:
        -:  305: 
        1:  306:      int card = testGame.discard[currPlayer][0];
        -:  307:      char name[32];
        1:  308:      cardNumToName(card, name);
        1:  309:      printf("Discard is: %-13s \n", name);
        -:  310:
        -:  311:
        -:  312:
        -:  313: 
        1:  314:   return 0;	
        -:  315:}
